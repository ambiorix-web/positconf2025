---
title: "Ambiorix"
subtitle: "Build for the web, the way the web works"
author:
  - name: "John Coene"
    email: "john@opifex.org"
    url: "https://opifex.org/"
    affiliations: "Created Ambiorix (2020)"
  - name: "Kennedy Mwavu"
    email: "mwavukennedy@gmail.com"
    url: "https://mwavu.com/"
    affiliations: "Maintainer & Contributor"
format:
  clean-revealjs:
    self-contained: true
---

## Intro

- Ambiorix is a web framework for R

- Build web applications & APIs

- Heavily inspired by [Express JS](https://expressjs.com/)

---

## Why should you care?

- Fine-grained control over HTTP
- Routing
  - Multipages out of the box :)
- Middleware support

---

## Is it?

![](./is-this-shiny-2.0.jpg)

NO.

---

## A moment for Shiny

- Shiny is brilliant (Pun intended)
- Ambiorix isn’t trying to replace Shiny
  - Provides a different interface: **request → response**
  - Appeal to a different set of useRs

- Both are based on the same underlying package: [{httpuv}](https://github.com/rstudio/httpuv),
but follow different principles on how to develop applications.

---

## Comparison

Shiny: Batteries plugged in. Plug n Play.

Ambiorix: Build [everything] from *scratch*.

| Shiny | Ambiorix |
|-------|----------|
| Single Page Applications | Multi-Page Applications |
| Pre-built UI components | No pre-built components |
| Bootstrap & jQuery by default | Use whatever you wish |
| Reactive framework built-in | No reactivity by default |
| WebSockets by default | HTTP requests by default |

---

## Request-Response Cycle

This is the **core idea** of ambiorix.

- Full access to the HTTP cycle

  ```
  Client → Request → Server → Response → Client
    ↑                                      ↓
    └──────── HTTP Cycle ──────────────────┘
  ```

---

## Hello World

```r
library(ambiorix)

app <- Ambiorix$new()

app$get("/", function(req, res) {
  res$send("Hello from Ambiorix!")
})

app$start()
```

- That’s all you need

---

## Request Object Structure

```r
# Route parameters: /users/:id
req$params$id

# Query strings: /search?q=term&limit=10
req$query$q
req$query$limit

# Request body (JSON)
req$parse_json()

# Request body (multipart)
req$parse_multipart()
```

---

## Route Parameters

```r
# Define dynamic routes
app$get("/users/:id", function(req, res) {
  user_id <- req$params$id

  user_data <- list(
    id = user_id,
    name = "John Doe",
    email = paste0("user", user_id, "@example.com")
  )

  res$json(user_data)
})
```

- `/users/123` → `req$params$id` = "123"
- `/users/456` → `req$params$id` = "456"

---

## Middleware

```r
# Define middleware
log_requests <- function(req, res) {
  cat("[LOG]", req$REQUEST_METHOD, req$PATH_INFO, "\n")
}

# Use middleware
app$use(log_requests)

# Middleware with parameters
app$use(function(req, res) {
  req$timestamp <- Sys.time()
})
```

- Runs **before** route handlers
- Modify request object
- Add authentication, logging, etc.

---

## Try it out

- GitHub: [ambiorix-web/ambiorix](https://github.com/ambiorix-web/ambiorix)
- Website: [ambiorix.dev](https://ambiorix.dev)
- Easy to get started
- Tutorials and examples included

---

## Thanks!

- Questions?
