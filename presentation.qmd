---
title: "Ambiorix"
subtitle: "Build for the web, the way the web works"
author:
  - name: "John Coene"
    email: "john@opifex.org"
    url: "https://opifex.org/"
    affiliations: "Created Ambiorix (2020)"
  - name: "Kennedy Mwavu"
    email: "mwavukennedy@gmail.com"
    url: "https://mwavu.com/"
    affiliations: "Maintainer & Contributor"
format:
  clean-revealjs:
    self-contained: true
---

## Intro

- Ambiorix is a web framework for R

- Build web applications & APIs

- Inspired by [Express JS](https://expressjs.com/)

---

## Is it?

![](./is-this-shiny-2.0.jpg){alt="is this a pigeon meme"}

**NO.**

---

## My Journey to Ambiorix

**The Problem:** Built huge Shiny applications, then realized I needed:

1. **Multi-pages** - Routing. Share links to a specific page. 
2. **APIs for clients** - They wanted to build their own frontends

**The Dilemma:** Didn't want to leave R ecosystem

**The Solution:** Found Ambiorix - R web framework that handles both!

*"And he lived happily ever after"*

---

## Why should you care?

- Fine-grained control over HTTP
- Routing
  - Multipages out of the box :)
- APIs
  - JSON endpoints alongside HTML pages

---

## Comparison

Shiny: Batteries plugged in. Plug n Play.

Ambiorix: Build [everything] from *scratch*.

| Shiny | Ambiorix |
|-------|----------|
| Single Page Applications | Multi-Page Applications |
| Pre-built UI components | No pre-built components |
| Bootstrap & jQuery by default | Use whatever you wish |
| Reactive framework built-in | No reactivity by default |
| WebSockets by default | HTTP requests by default |

---

## Request-Response Cycle

This is the **core idea** of ambiorix.

- Full access to the HTTP cycle

  ```
  Client → Request → Server → Response → Client
    ↑                                      ↓
    └──────── HTTP Cycle ──────────────────┘
  ```

---

## Let's Build Something Together

**Demo: Interactive Data Dashboard**

- Explore R datasets (`mtcars`, `iris`, `airquality`)
- **HTML interface** for humans
- **JSON API** for machines  
- **Same functions, different formats**

*[Live Demo Time!]*

---

## Hello World: Request → Response

```r
library(ambiorix)

app <- Ambiorix$new()

app$get("/", function(req, res) {
  res$send("Hello from Ambiorix!")
})

app$start(port = 3000)
```

**The cycle in action:**

- Browser requests `GET /` 
- Handler function receives `req`, `res`
- We send response with `res$send()`

---

## Brief Overvie of HTTP Methods

- GET: retrieve resource from the server 
- PUT: update a resource
- POST: create a in the server
- DELETE: removes a resource from server

---

## The Demo App

```r
library(ambiorix)
app <- Ambiorix$new()

# HTML route
app$get("/datasets/:name", function(req, res) {
  data <- get_dataset_summary(req$params$name)
  res$send(create_html_page(data)) # Returns HTML
})

# JSON route
app$get("/api/datasets/:name/summary", function(req, res) {
  data <- get_dataset_summary(req$params$name) # Same function!
  res$json(data) # Returns JSON
})

app$start(port = 3000)
```

---

## Same Data, Different Formats

**One R function:**
```r
get_dataset_summary("mtcars")
# Returns: list with statistics, sample data, etc.
```

**Two interfaces:**

- **Browser**: Beautiful HTML tables and charts
- **API**: Raw JSON for programmatic access

**Key insight**: Write R logic once, serve it multiple ways!

---

## Route Parameters in Action

```r
app$get("/datasets/:name", function(req, res) {
  dataset_name <- req$params$name
  # dataset_name = "mtcars", "iris", "airquality"

  summary <- get_dataset_summary(dataset_name)
  res$send(create_dataset_page(summary))
})
```

- `/datasets/mtcars` → Motor Trend Car Road Tests
- `/datasets/iris` → Edgar Anderson's Iris Data  
- `/datasets/airquality` → New York Air Quality

**URLs are meaningful and shareable!**

---

## Query Parameters for Flexibility

```r
app$get("/api/datasets/:name/data", function(req, res) {
  dataset_name <- req$params$name
  limit <- req$query$limit # ?limit=10

  data <- get_dataset_data(dataset_name, limit)
  res$json(data)
})
```

- `/api/datasets/mtcars/data` → All rows
- `/api/datasets/mtcars/data?limit=5` → First 5 rows
- `/api/datasets/iris/data?limit=10` → First 10 rows

**Standard web patterns**

---

## Error Handling

```r
app$get("/api/datasets/:name/summary", function(req, res) {
  summary <- get_dataset_summary(req$params$name)

  if (is.null(summary)) {
    response <- list(
      error = "Dataset not found",
      message = "Available: mtcars, iris, airquality"
    )
    res$status <- 404L
    return(
      res$json(response)
    )
  }

  res$json(summary)
})
```

**Proper HTTP status codes & helpful error messages**

---

## Multi-Page Applications

**Unlike Shiny's single-page approach:**

- `/` → Homepage with dataset cards
- `/datasets/mtcars` → mtcars analysis page  
- `/datasets/iris` → iris analysis page
- `/api` → API documentation page

**Web-native navigation:**

- Browser back/forward buttons work
- Each page has a unique, shareable URL
- No JavaScript required for basic navigation

---

## Live Demo: The Full Experience

**Let's explore our app together:**

1. **Homepage** (`localhost:3000`) - Dataset gallery
2. **Dataset detail** (`/datasets/mtcars`) - Rich HTML interface
3. **JSON API** (`/api/datasets/mtcars/summary`) - Same data, raw format
4. **Error handling** (`/datasets/nonexistent`) - Graceful 404s

**One Ambiorix app = Multiple experiences!**

---

## What We Built

✅ **Route parameters** (`/datasets/:name`)  
✅ **Query parameters** (`?limit=10`)  
✅ **JSON APIs** (`res$json()`)  
✅ **HTML interfaces** (`res$send()`)  
✅ **Error handling** (`404` responses)  
✅ **Multi-page apps** (shareable URLs)  
✅ **Familiar R workflow** (datasets, statistics)

**~200 lines of R code = Full-featured web app!**

---

## Try Ambiorix

- **GitHub**: [ambiorix-web/ambiorix](https://github.com/ambiorix-web/ambiorix)
- **Website**: [ambiorix.dev](https://ambiorix.dev)  
- **Demo code**: [ambiorix-web/positconf2025](https://github.com/ambiorix-web/positconf2025)

**Get started:**
```r
install.packages("ambiorix")
# Run the demo from /demo folder
```

---

## Thanks!

- Questions?
