---
title: "Ambiorix"
subtitle: "Build for the web, the way the web works"
author:
  - name: "John Coene"
    email: "john@opifex.org"
    url: "https://opifex.org/"
    affiliations: "Created Ambiorix (2020)"
  - name: "Kennedy Mwavu"
    email: "mwavukennedy@gmail.com"
    url: "https://mwavu.com/"
    affiliations: "Maintainer & Contributor"
format:
  clean-revealjs:
    self-contained: true
---

## Intro

- Ambiorix is a web framework for R

- Build web applications & APIs

- Heavily inspired by [Express JS](https://expressjs.com/)

---

## Why should you care?

- Fine-grained control over HTTP
- Routing
  - Multipages out of the box :)
- Middleware support

---

## Is it?

![](./is-this-shiny-2.0.jpg)

NO.

---

## A moment for Shiny

- Shiny is brilliant (Pun intended)
- Ambiorix isn’t trying to replace Shiny
  - Provides a different interface: **request → response**
  - Appeal to a different set of useRs

- Both are based on the same underlying package: [{httpuv}](https://github.com/rstudio/httpuv),
but follow different principles on how to develop applications.

## Comparison

Shiny: Batteries plugged in. Plug n Play.

Ambiorix: Build [everything] from *scratch*.

| Shiny | Ambiorix |
|-------|----------|
| Single Page Applications | Multi-Page Applications |
| Pre-built UI components | No pre-built components |
| Bootstrap & jQuery by default | Use whatever you wish |
| Reactive framework built-in | No reactivity by default |
| WebSockets by default | HTTP requests by default |

---

## Request-Response Cycle

This is the **core idea** of ambiorix.

- Every input is a request
- You control the response
- Ambiorix gives you full access to the HTTP cycle
  1. Client makes a request to the server.
  1. Server handles the request
  1. Server sends back a response to the client

---

## Hello World

```r
library(ambiorix)

app <- Ambiorix$new()

app$get("/", function(req, res) {
  res$send("Hello from Ambiorix!")
})

app$start()
```

- That’s all you need

---

## Build APIs too

- Route JSON responses
- Work with `req$body`, `req$query`, `req$params` etc
- Great for building backend APIs in R

---

## Example: API Endpoint

```r
app$post("/add", function(req, res) {
  req_data <- req$parse_multipart(req)
  x <- as.numeric(req_data$x)
  y <- as.numeric(req_data$y)

  result <- list(
    sum = x + y,
    message = "Success",
    code = 200L
  )

  res$json(result)
})
```

- All R
- You write the logic

---

## Examples

Live apps:

- [rrr.is](https://rrr.is/): URL shortener
- [mwavu.com](https://mwavu.com/): Personal Website

Talk of eating your own dog food :)

More examples in the docs:

- [ambiorix.dev/docs/examples](https://ambiorix.dev/docs/examples/)

---

## Try it out

- GitHub: [ambiorix-web/ambiorix](https://github.com/ambiorix-web/ambiorix)
- Website: [ambiorix.dev](https://ambiorix.dev)
- Easy to get started
- Tutorials and examples included

---

## Thanks!

- Questions?
